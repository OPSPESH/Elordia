local l = require "main.loader"
local defsave = require("defsave.defsave")
local sprint

function init(self)
	defsave.appname = "Realms_of_elordia"
	defsave.default_data = require("main.default")
	defsave.load("player")
	go.set_position(defsave.get("player", "position"))
	
	self.speed = 75
	self.inventory = 0

	msg.post(".", "acquire_input_focus")

	-- what animation is playing
	self.current_anim = nil

	-- something to do with collision
	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
	self.colliding = false

	sprint = defsave.get("player", "sprint")
end

function final(self)
	defsave.set("player", "position", go.get_position())
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- check whether the charicter is colliding with anything every tick --
	
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end

	self.correction = vmath.vector3()

	local p = go.get_position()
	go.set_position(p + self.dir * self.speed * dt)
	
	-- animation control -- 
	
	-- sets which animation plays if no movement
	local anim = hash("idle")

	-- sets which anim plays if walking
	if self.speed == 75 then
		if self.dir.y > 0 then
			anim = hash("walk_up")
		elseif self.dir.y < 0 then
			anim = hash("walk_down")
		elseif self.dir.x > 0 then
			anim = hash("walk_right")
		elseif self.dir.x < 0 then
			anim = hash("walk_left")
		end

	-- sets which animation plays if sprinting 
	elseif self.speed == 125 then
		if self.dir.y > 0 then
			anim = hash("run_up")
		elseif self.dir.y < 0 then
			anim = hash("run_down")
		elseif self.dir.x > 0 then
			anim = hash("run_right")
		elseif self.dir.x < 0 then
			anim = hash("run_left")
		end
	end

	-- actually plays the animation
	if anim ~= self.current_anim then
		sprite.play_flipbook("#sprite", anim)
		self.current_anim = anim
	end
	self.dir = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	-- decides what to do if you have collided with anything 
	if message_id == hash("contact_point_response") and message.other_group == hash("barrier") then
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end
	end

	if message_id == hash("trigger_response") then
		-- says when colliding to do an event 
		if message.other_group == hash("load_my_house") then
			if message.enter == true then 
				l.give_collection("#my_house_downstairs")
				self.colliding = "load_world"
			else
				self.colliding = false
			end
		end

		if message.other_group == hash("load_my_house_upstairs") then
			if message.enter ==  true then
				l.give_collection("#my_house_upstairs")
				self.colliding = "load_world"
			else
				self.colliding = false
			end
		end

		if message.other_group == hash("load_village") then
			if message.enter ==  true then
				l.give_collection("#village")
				self.colliding = "load_world"
			else
				self.colliding = false
			end
		end

		if message.other_group == hash("load_weapon_store") then
			if message.enter == true then
				l.give_collection("#weapon_store")
				self.colliding = "load_world"
			else
				self.colliding = false
			end
		end

		if message.other_group == hash("weapon_store_shopkeeper") then
			if message.enter == true then
				self.colliding = "weapon_store_shopkeeper"
			else
				self.colliding = false
			end
		end

		if message.other_group == hash("armour_forrest") then
			if message.enter == true then
				l.give_collection("#armour_forrest")
				self.colliding = "load_world"
			else
				self.colliding = false
			end
		end
	end

	if message_id == hash("force_walk") then
		self.message = table.remove(message)
		if self.message == true then
			sprint = true
			defsave.set("player", "sprint", true)
		elseif self.message == false then
			sprint = false
			defsave.set("player", "sprint", false)
		end
	end

	if message_id == hash("dialogue_url") then
		self.dialogue_url = table.remove(message)
	end

	if message_id == hash("slow_down") then
		self.speed = 75
	end
end

function on_input(self, action_id, action)
	if action_id == hash("inventory") and action.released then 
		if self.inventory == 0 then 
			msg.post("/inventory", "show")
			timer.delay(0.5, false, function ()
				self.inventory = 1	
			end)
		elseif self.inventory == 1 then 
			msg.post("/inventory", "hide")
			timer.delay(0.5, false, function ()
				self.inventory = 0
			end)
		end
	end
	
	if self.inventory == 0 then 
	-- check whether walking or running
		if action_id == hash("sprint") then
			if sprint == true then
				if action.released ~= true then
					self.speed = 125
				else
					self.speed = 75
				end
			end
		end

		-- moves the charicter
		if action_id == hash("up") then
			self.dir.y = 1
		elseif action_id == hash("down") then
			self.dir.y = -1
		elseif action_id == hash("left") then
			self.dir.x = -1
		elseif action_id == hash("right") then
			self.dir.x = 1
		end

		if action_id == hash("action") and self.colliding ~= false then
			if self.colliding == "load_world" then
				print("good")
				msg.post("/worlds#loader", "load_level")
			elseif self.colliding == "weapon_store_shopkeeper" then
				msg.post(self.dialogue_url, "play", {"dialogue_1"})
			end
			self.colliding = false
		end
	end
end